# # # Klipper Adaptive Meshing # # #

# Si vous avez utilisé des versions précédentes de cette configuration, 
# vous devrez peut-être renommer le fichier en Adaptive_Meshing.cfg.
# L'ancien nom de fichier était Adaptive_Mesh.cfg.

# Attention ! Si vous avez d'autres macros BED_MESH_CALIBRATE définies ailleurs dans votre configuration, 
# vous devrez les commenter / supprimer pour que cela fonctionne. (Klicky/Euclid Probe)
# Vous devrez également vous assurer que [exclude_object] est défini dans le fichier printer.cfg, et que votre trancheur étiquette les objets.
# Cette macro extraira des informations des objets dans votre gcode pour définir une zone minimale et maximale du maillage à sonder, 
# créant ainsi un maillage adaptatif !
# Cette macro n'augmentera pas les valeurs probe_count dans votre configuration [bed_mesh]. 
# Si vous souhaitez des maillages plus détaillés, veillez à augmenter probe_count. Nous recommandons au moins 5,5.

#====================================================================
# IMPORTANT NOTE
#====================================================================
# J'ai modifié le nom de l'ancien fichier Adaptive_Mesh.cfg pour qu'il corresponde à la convention de nommage de KAMP dans le dépôt. 
# Le nouveau nom du fichier est Adaptive_Meshing.cfg.

# Si vous êtes un nouvel utilisateur, vous n'avez pas besoin de vous inquiéter de quoi que ce soit. Utilisez simplement les fichiers tels quels. 
# Cependant, si vous avez déjà utilisé mon fichier de configuration et que vous copiez-collez les fichiers mis à jour, 
# vous pourriez rencontrer une erreur. Pour éviter cela, assurez-vous de renommer le fichier en conséquence.

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE

### Cette section permet de contrôler les voyants lumineux de statut que votre imprimante peut avoir.

variable_led_enable: False              # Active/désactive l'utilisation des voyants lumineux de statut dans cette macro.
variable_status_macro: 'status_meshing' # Si votre imprimante dispose de voyants lumineux de statut (StealthBurner), 
                                        # vous pouvez utiliser la macro qui modifie leur statut ici.

### Cette section configure le brouillage des points de maillage, 
### ce qui permet de varier légèrement les points de sonde lorsqu'on imprime plusieurs fois le même fichier G-code.

variable_fuzz_enable: False             # Active/désactive l'utilisation du brouillage des points de maillage pour légèrement randomiser les points de sonde afin de répartir l'usure sur la surface d'impression, la valeur par défaut est False.
variable_fuzz_min: 0                    # Si activé, la distance minimale en mm qu'un point de sonde peut être randomisé, la valeur par défaut est 0.
variable_fuzz_max: 4                    # Si activé, la distance maximale en mm qu'un point de sonde peut être randomisé, la valeur par défaut est 4.

### Cette section sert à configurer une marge de maillage, ce qui permet d'étendre le maillage sondé au-delà de la zone d'impression.

variable_margin_enable: False           # Active/désactive l'ajout d'une marge à la zone maillée pour étendre le maillage en fonction de besoins spécifiques, la valeur par défaut est False.
variable_margin_size: 5                 # Taille en millimètres pour étendre le maillage au-delà de la zone d'impression dans toutes les directions.

### This section is for those using a dockable probe that is stored outside of the print area. ###

variable_probe_dock_enable: False       # Active/désactive l'utilisation d'une sonde amovible qui est stockée en dehors de la zone d'impression, la valeur par défaut est False.
variable_attach_macro: 'Attach_Probe'   # C'est ici que vous définissez la macro qui ATTACHE la sonde à la tête d'impression. Par exemple, 'Attach_Probe'.
variable_detach_macro: 'Dock_Probe'     # C'est ici que vous définissez la macro qui DÉTACHE la sonde de la tête d'impression. Par exemple, 'Dock_Probe'.

### Cette section est destinée à ceux qui utilisent le gestionnaire de mises à jour de Moonraker pour KAMP, ou qui souhaitent une macro plus détaillée. ###

variable_display_parameters: True       # Affiche les paramètres de la macro dans la console, utile pour déboguer l'appel SETUP_KAMP_MESHING, ou pour plus de verbosité.

gcode:

    {% if display_parameters == True %}
      { action_respond_info("led_enable  : %d" % (led_enable))  }
      { action_respond_info("status_macro: \'%s\'" % (status_macro))  }
      { action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }
      { action_respond_info("fuzz_min    : %f" % (fuzz_min))  }
      { action_respond_info("fuzz_max    : %f" % (fuzz_max))  }
      { action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }
      { action_respond_info("attach_macro: \'%s\'" % (attach_macro))  }
      { action_respond_info("detach_macro: \'%s\'" % (detach_macro))  }
    {% endif %}
    
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
    
    {% if margin_enable == False %}
        {% set margin_size = 0 %}
    {% endif %}
    
    { action_respond_info("{} Points de l'objet, contraints au maillage de la surface d'impression. [{!r} {!r}]".format(
        all_points | count,
        bed_mesh_min,
        bed_mesh_max,
    )) }

    {% if fuzz_enable == True %}
        {% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}
        {% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}
        {% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}
        {% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}
        {% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}
    {% else %}
        {% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}
        {% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}
        {% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}
        {% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}
    {% endif %}

    { action_respond_info("Limites de l'objet, contraintes au maillage de la surface d'impression: {!r}, {!r}".format(
        (x_min, y_min),
        (x_max, y_max),
    )) }

    {% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
    {% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}

    {% if (([points_x, points_y]|max) > 6) %}
        {% set algorithm = "bicubic" %}
        {% set min_points = 4 %}
    {% else %}
        {% set algorithm = "lagrange" %}
        {% set min_points = 3 %}
    {% endif %}
    { action_respond_info( "Algorithm: {}".format(algorithm)) }

    {% set points_x = [points_x, min_points]|max  %}
    {% set points_y = [points_y, min_points]|max  %}
    { action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }

    {% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}
        {% set ref_index = (points_x * points_y / 2) | int %}
        { action_respond_info( "Reference index: {}".format(ref_index) ) }
    {% else %}
        {% set ref_index = -1 %}
    {% endif %}

    {% if probe_dock_enable == True %}
        {attach_macro}              # Attache/déploie une sonde si celle-ci est stockée en dehors de la zone d'impression.
    {% endif %}

    {% if led_enable == True %}
        {status_macro}              # Configurer les voyants lumineux de statut.
    {% endif %}

    _BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}

    {% if probe_dock_enable == True %}
        {detach_macro}              # Détache/range une sonde si celle-ci est stockée en dehors de la zone d'impression.
    {% endif %}

[gcode_macro SETUP_KAMP_MESHING]
gcode:
  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}
  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE='"{params.STATUS_MACRO|default('status_meshing')|string}"'

  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}
  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}
  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}

  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}
  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE='"{params.ATTACH_MACRO|default('Attach_Probe')|string}"'
  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE='"{params.DETACH_MACRO|default('Dock_Probe')|string}"'